# first, install Cypress & build Nextjs Production, then run all tests
stages:
  - build
  - test
  - deploy

# to cache, we use environment variables
# to point at the folders we can list as paths in "cache" job settings
variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

# cache using branch name
# https://gitlab.com/help/ci/caching/index.md
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm
    - cache/Cypress
    - node_modules
    - package-lock.json
    - .next


# this job installs NPM dependencies, Cypress, and builds Nextjs
install:
  image: cypress/base:16.5.0
  stage: build

  script:    
    - rm -rf .next
    - npm ci
    # check Cypress binary path and cached versions
    # useful to make sure we are not carrying around old versions
    - npx cypress cache path
    - npx cypress cache list
    - npm run cy:verify
    - npm run cy:info
    - npm run build

# all jobs that actually run tests can use the same definition
cypress:
  image: cypress/base:16.5.0
  stage: test
  script:
    # print CI environment variables for reference
    # start the server in the background
    - npm run test
  artifacts:
    when: always
    paths:
      - coverage/
    expire_in: 1 day


linter:
  image: node:16.5.0
  stage: test
  needs: [install]
  script:
    - npm run lint
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    policy: pull
    paths:
      - node_modules
      - package-lock.json
      - .next
  when: on_success

#staging:
#  stage: deploy
#  image: ubuntu:latest
#  needs: [cypress, linter]
#  before_script:
#    # Setup SSH deploy keys
#    - apt-get update -y
#    - 'which ssh-agent || ( apt-get install -y openssh-client )'
#    - 'which rsync || ( apt-get install -y rsync )'
#    - eval $(ssh-agent -s)
#    - ssh-add <(echo "$SSH_STAGING_PRIVATE_KEY" | base64 -d)
#    - mkdir -p ~/.ssh
#    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#  cache:
#    key: ${CI_COMMIT_REF_SLUG}
#    policy: pull
#    paths:
#      - node_modules
#      - package-lock.json
#      - .next
#  script:
#    - rsync -chvrPt ./markaz-pillar-fe/.env deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
#    - rsync -chvrPt ./markaz-pillar-fe/package.json deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
#    - rsync -chvrPt ./markaz-pillar-fe/next.config.js deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
#    - rsync -chvrPt --delete --links --copy-links ./markaz-pillar-fe/node_modules/ deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/node_modules/
#    - rsync -chvrPt --delete --links --copy-links ./markaz-pillar-fe/.next/ deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/.next/
#    - ssh -i staging-key deploy-ci@staging.markazpillar.afriza.co "systemctl restart nginx.service && systemctl restart frontend.service"
#  when: on_success
#  only:
#    - master
#
#production:
#  stage: deploy
#  image: ubuntu:latest
#  needs: [cypress, linter]
#  before_script:
#    # Setup SSH deploy keys
#    - apt-get update -y
#    - 'which ssh-agent || ( apt-get install -y openssh-client )'
#    - 'which rsync || ( apt-get install -y rsync )'
#    - eval $(ssh-agent -s)
#    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
#    - mkdir -p ~/.ssh
#    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#  cache:
#    key: ${CI_COMMIT_REF_SLUG}
#    policy: pull
#    paths:
#      - node_modules
#      - package-lock.json
#      - .next
#  script:
#    - rsync -chvrPt ./markaz-pillar-fe/.env deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
#    - rsync -chvrPt ./markaz-pillar-fe/package.json deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
#    - rsync -chvrPt ./markaz-pillar-fe/next.config.js deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
#    - rsync -chvrPt --delete --links --copy-links ./markaz-pillar-fe/node_modules/ deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/node_modules/
#    - rsync -chvrPt --delete --links --copy-links ./markaz-pillar-fe/.next/ deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/.next/
#    - ssh -i staging-key deploy-ci@staging.markazpillar.afriza.co "systemctl restart nginx.service && systemctl restart frontend.service"
#  when: on_success
#  only:
#    - production

sonarCheck:
  image: node:16.5.0
  stage: deploy
  needs: [cypress]
  variables:
    SONARQUBE_URL: $SONARQUBE_URL
    SONARQUBE_PROJECT_KEY: $SONARQUBE_PROJECT_KEY
    SONARQUBE_TOKEN: $SONARQUBE_TOKEN
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    policy: pull
    paths:
      - node_modules
      - package-lock.json
      - .next
  before_script:
    - npm install -g sonarqube-scanner
  script:
    - echo "$SONARQUBE_URL"
    - echo "$SONARQUBE_PROJECT_KEY"
    - echo "$SONARQUBE_TOKEN"
    - sonar-scanner -Dsonar.projectName="Markazpillar FE App" -Dsonar.login=$SONARQUBE_TOKEN -Dsonar.host.url=$SONARQUBE_URL -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY -Dsonar.sources=src
  only:
    - master
    - production
