stages:
  - build
  - test
  - deploy

image: node:latest

build:
  stage: build
  script:
    - rm -rf ./.next/
    - CI=false npm install     # install required packages
    - npm run build
  artifacts:
    when: on_success
    paths:
      - ./.next/
    expire_in: 1 week
  cache:
    key: $CI_COMMIT_REF_NAME
    policy: push
    paths:
      - ./node_modules/
      - ./package-lock.json
      - ./yarn.lock
      - ./.next/
      - ./cache/Cypress


linter:
  stage: test
  needs: [build]
  script:
    - npm run lint
  cache:
    key: $CI_COMMIT_REF_NAME
    policy: pull
    paths:
      - ./node_modules/
      - ./package-lock.json
      - ./yarn.lock
      - ./.next/
  when: on_success



# Set environment variables for folders in "cache" job settings for npm modules and Cypress binary
variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

# Cache using branch name
# https://gitlab.com/help/ci/caching/index.md
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ./cache/Cypress
    - ./node_modules

cypress:
  image: node:latest
  stage: test
  needs: [build]
  before_script:
    - apt clean
    - apt-get update
    - apt-get -y install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
  script:
    - npm ci
    # check Cypress binary path and cached versions
    - npx cypress cache path
    - npx cypress cache list
    - npm run test
  cache:
    key: $CI_COMMIT_REF_NAME
    policy: pull
    paths:
      - ./node_modules/
      - ./package-lock.json
      - ./yarn.lock
      - ./.next/
      - ./cache/Cypress
  artifacts:
    paths:
      - coverage/
  script:
    - rm -rf ./.nyc_output
    - npm ci
    # check Cypress binary path and cached versions
    - npx cypress cache path
    - npx cypress cache list
    - npm run test
  when: on_success


staging:
  stage: deploy
  image: ubuntu:latest
  needs: [cypress, linter]
  before_script:
    # Setup SSH deploy keys
    - apt-get update -y
    - 'which ssh-agent || ( apt-get install -y openssh-client )'
    - 'which rsync || ( apt-get install -y rsync )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_STAGING_PRIVATE_KEY" | base64 -d)
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  cache:
    key: $CI_COMMIT_REF_NAME
    policy: pull
    paths:
      - ./node_modules/
      - ./package-lock.json
      - ./yarn.lock
      - ./.next/
  script:
    - rsync -chvrPt ./markaz-pillar-fe/.env deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
    - rsync -chvrPt ./markaz-pillar-fe/package.json deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
    - rsync -chvrPt ./markaz-pillar-fe/next.config.js deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
    - rsync -chvrPt --delete --links --copy-links ./markaz-pillar-fe/node_modules/ deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/node_modules/
    - rsync -chvrPt --delete --links --copy-links ./markaz-pillar-fe/.next/ deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/.next/
    - ssh -i staging-key deploy-ci@staging.markazpillar.afriza.co "systemctl restart nginx.service && systemctl restart frontend.service"
  when: on_success
  only:
    - master

production:
  stage: deploy
  image: ubuntu:latest
  needs: [cypress, linter]
  before_script:
    # Setup SSH deploy keys
    - apt-get update -y
    - 'which ssh-agent || ( apt-get install -y openssh-client )'
    - 'which rsync || ( apt-get install -y rsync )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  cache:
    key: $CI_COMMIT_REF_NAME
    policy: pull
    paths:
      - ./node_modules/
      - ./package-lock.json
      - ./yarn.lock
      - ./.next/
  script:
    - rsync -chvrPt ./markaz-pillar-fe/.env deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
    - rsync -chvrPt ./markaz-pillar-fe/package.json deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
    - rsync -chvrPt ./markaz-pillar-fe/next.config.js deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/
    - rsync -chvrPt --delete --links --copy-links ./markaz-pillar-fe/node_modules/ deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/node_modules/
    - rsync -chvrPt --delete --links --copy-links ./markaz-pillar-fe/.next/ deploy-ci@staging.markazpillar.afriza.co:/home/deploy-ci/apps/frontend/.next/
    - ssh -i staging-key deploy-ci@staging.markazpillar.afriza.co "systemctl restart nginx.service && systemctl restart frontend.service"
  when: on_success
  only:
    - production

sonarCheck:
  stage: deploy
  needs: [cypress]
  variables:
    SONARQUBE_URL: $SONARQUBE_URL
    SONARQUBE_PROJECT_KEY: $SONARQUBE_PROJECT_KEY
    SONARQUBE_TOKEN: $SONARQUBE_TOKEN
  cache:
    key: $CI_COMMIT_REF_NAME
    policy: pull
    paths:
      - ./node_modules/
      - ./package-lock.json
      - ./yarn.lock
      - ./.next/
  before_script:
    - npm install -g sonarqube-scanner
  script:
    - echo "$SONARQUBE_URL"
    - echo "$SONARQUBE_PROJECT_KEY"
    - echo "$SONARQUBE_TOKEN"
    - sonar-scanner -Dsonar.projectName="Markazpillar FE App" -Dsonar.login=$SONARQUBE_TOKEN -Dsonar.host.url=$SONARQUBE_URL -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY -Dsonar.sources=src
  only:
    - master
    - production
